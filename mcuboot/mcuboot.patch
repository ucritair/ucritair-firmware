diff --git a/boot/zephyr/io.c b/boot/zephyr/io.c
index 309f1ab9..46aca51c 100644
--- a/boot/zephyr/io.c
+++ b/boot/zephyr/io.c
@@ -101,76 +101,233 @@ void io_led_set(int value)
 #if defined(CONFIG_BOOT_SERIAL_ENTRANCE_GPIO) || defined(CONFIG_BOOT_USB_DFU_GPIO) || \
     defined(CONFIG_BOOT_FIRMWARE_LOADER_ENTRANCE_GPIO)
 
-#if defined(CONFIG_MCUBOOT_SERIAL)
-#define BUTTON_0_DETECT_DELAY CONFIG_BOOT_SERIAL_DETECT_DELAY
-#elif defined(CONFIG_BOOT_FIRMWARE_LOADER)
-#define BUTTON_0_DETECT_DELAY CONFIG_BOOT_FIRMWARE_LOADER_DETECT_DELAY
-#else
-#define BUTTON_0_DETECT_DELAY CONFIG_BOOT_USB_DFU_DETECT_DELAY
-#endif
+#include <zephyr/kernel.h>
+#include <zephyr/drivers/gpio.h>
 
-#define BUTTON_0_NODE DT_ALIAS(mcuboot_button0)
+#define N_ROWS 4
+static const struct gpio_dt_spec btn_rows[N_ROWS] =
+{
+    {.port = DEVICE_DT_GET(DT_NODELABEL(gpio1)), .pin=9, .dt_flags=GPIO_ACTIVE_HIGH},
+    {.port = DEVICE_DT_GET(DT_NODELABEL(gpio1)), .pin=10, .dt_flags=GPIO_ACTIVE_HIGH},
+    {.port = DEVICE_DT_GET(DT_NODELABEL(gpio1)), .pin=11, .dt_flags=GPIO_ACTIVE_HIGH},
+    {.port = DEVICE_DT_GET(DT_NODELABEL(gpio1)), .pin=12, .dt_flags=GPIO_ACTIVE_HIGH},
+};
+
+#define N_COLS 2
+static const struct gpio_dt_spec btn_cols[N_COLS] =
+{
+    {.port = DEVICE_DT_GET(DT_NODELABEL(gpio1)), .pin=13, .dt_flags=GPIO_ACTIVE_HIGH},
+    {.port = DEVICE_DT_GET(DT_NODELABEL(gpio1)), .pin=14, .dt_flags=GPIO_ACTIVE_HIGH},
+};
 
-#if DT_NODE_EXISTS(BUTTON_0_NODE) && DT_NODE_HAS_PROP(BUTTON_0_NODE, gpios)
-static const struct gpio_dt_spec button0 = GPIO_DT_SPEC_GET(BUTTON_0_NODE, gpios);
-#else
-#error "Serial recovery/USB DFU button must be declared in device tree as 'mcuboot_button0'"
-#endif
+static const struct gpio_dt_spec reg_3v3_dt = {.port = DEVICE_DT_GET(DT_NODELABEL(gpio0)), .pin=5, .dt_flags=GPIO_ACTIVE_HIGH};
+static const struct gpio_dt_spec en_7002 = {.port = DEVICE_DT_GET(DT_NODELABEL(gpio0)), .pin=11, .dt_flags=GPIO_ACTIVE_HIGH};
+static const struct gpio_dt_spec buck_7002 = {.port = DEVICE_DT_GET(DT_NODELABEL(gpio0)), .pin=21, .dt_flags=GPIO_ACTIVE_HIGH};
+static const struct gpio_dt_spec reg_5v = {.port = DEVICE_DT_GET(DT_NODELABEL(gpio1)), .pin=4, .dt_flags=GPIO_ACTIVE_HIGH};
+static const struct gpio_dt_spec epd_reset = {.port = DEVICE_DT_GET(DT_NODELABEL(gpio1)), .pin=5, .dt_flags=GPIO_ACTIVE_HIGH};
 
-bool io_detect_pin(void)
+void init_buttons()
 {
-    int rc;
-    int pin_active;
+    // gpio_pin_configure_dt(&en_7002, GPIO_OUTPUT_HIGH);
+    gpio_pin_configure_dt(&buck_7002, GPIO_OUTPUT_LOW);
 
-    if (!device_is_ready(button0.port)) {
-        __ASSERT(false, "GPIO device is not ready.\n");
-        return false;
+    gpio_pin_configure_dt(&reg_5v, GPIO_OUTPUT_LOW);
+    // gpio_pin_configure_dt(&epd_reset, GPIO_OUTPUT_LOW);
+
+    gpio_pin_configure_dt(&reg_3v3_dt, GPIO_OUTPUT_HIGH);
+
+    for (int i = 0; i < N_ROWS; i++)
+    {
+        gpio_pin_configure_dt(&btn_rows[i], GPIO_INPUT);
+    }
+
+    for (int i = 0; i < N_COLS; i++)
+    {
+        gpio_pin_configure_dt(&btn_cols[i], GPIO_OUTPUT_ACTIVE);
+        gpio_pin_set_dt(&btn_cols[i], true);
+    }
+}
+
+uint8_t get_buttons()
+{
+    uint8_t bits = 0;
+
+    for (int col = 0; col < N_COLS; col++)
+    {
+        gpio_pin_set_dt(&btn_cols[col], false);
+        k_usleep(25);
+        for (int row = 0; row < N_ROWS; row++)
+        {
+            bits <<= 1;
+            bits |= gpio_pin_get_dt(&btn_rows[row]);
+        }
+        gpio_pin_set_dt(&btn_cols[col], true);
+        k_usleep(25);
     }
 
-    rc = gpio_pin_configure_dt(&button0, GPIO_INPUT);
-    __ASSERT(rc == 0, "Failed to initialize boot detect pin.\n");
+    return ~bits;
+}
 
-    rc = gpio_pin_get_dt(&button0);
-    pin_active = rc;
+#define CAT_BTN_MASK_SELECT 0x01
+#define CAT_BTN_MASK_START 0x02
+#define CAT_BTN_MASK_A 0x04
+#define CAT_BTN_MASK_B 0x08
+#define CAT_BTN_MASK_DOWN 0x10
+#define CAT_BTN_MASK_RIGHT 0x20
+#define CAT_BTN_MASK_LEFT 0x40
+#define CAT_BTN_MASK_UP 0x80
 
-    __ASSERT(rc >= 0, "Failed to read boot detect pin.\n");
+const struct device *display_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_display));
 
-    if (pin_active) {
-        if (BUTTON_0_DETECT_DELAY > 0) {
-#ifdef CONFIG_MULTITHREADING
-            k_sleep(K_MSEC(50));
-#else
-            k_busy_wait(50000);
-#endif
+static const struct gpio_dt_spec lcd_bl = {.port = DEVICE_DT_GET(DT_NODELABEL(gpio1)), .pin=0, .dt_flags=GPIO_ACTIVE_HIGH};
 
-            /* Get the uptime for debounce purposes. */
-            int64_t timestamp = k_uptime_get();
+#define LCD_IMAGE_H 320
+#define LCD_IMAGE_W 240
 
-            for(;;) {
-                rc = gpio_pin_get_dt(&button0);
-                pin_active = rc;
-                __ASSERT(rc >= 0, "Failed to read boot detect pin.\n");
+#include <zephyr/drivers/display.h>
 
-                /* Get delta from when this started */
-                uint32_t delta = k_uptime_get() -  timestamp;
+uint16_t lcd_framebuffer[LCD_IMAGE_H*LCD_IMAGE_W] = {0};
 
-                /* If not pressed OR if pressed > debounce period, stop. */
-                if (delta >= BUTTON_0_DETECT_DELAY || !pin_active) {
-                    break;
-                }
+#include "font_8x8_basic.cpp"
 
-                /* Delay 1 ms */
-#ifdef CONFIG_MULTITHREADING
-                k_sleep(K_MSEC(1));
-#else
-                k_busy_wait(1000);
-#endif
+void lcd_write_char(uint16_t color, int x, int y, char c)
+{
+    for (int bx = 0; bx < 8; bx++)
+    {
+        for (int by = 0; by < 8; by++)
+        {
+            if (font8x8_basic[(int)c][by] & (1<<bx))
+            {
+                const int scale = 1;
+
+                for (int sx = 0; sx < scale; sx++)
+                {
+                    for (int sy = 0; sy < scale; sy++)
+                    {
+                        int fy = (((y+by)*scale)+sy);
+                        int fx = ((x+bx)*scale)+sx;
+                        
+                        if (fx < 0 || fx >= LCD_IMAGE_W) continue;
+                        if (fy < 0 || fy >= LCD_IMAGE_H) continue;
+
+                        lcd_framebuffer[(fy * LCD_IMAGE_W) + fx] = color;
+                    }
+                }
             }
         }
     }
+}
+
+void lcd_write_str(uint16_t color, int x, int y, char* str)
+{
+    int ox = x;
+    while (*str)
+    {
+        lcd_write_char(color, x, y, *str);
+        x += 8;
+        if ((*str) == '\n')
+        {
+            x = ox;
+            y += 8;
+        }
+        str++;
+    }
+}
+
+bool io_detect_pin()
+{
+    init_buttons();
+
+    k_msleep(25);
+
+    for (int i = 0; i < 10; i++)
+    {
+        uint8_t b = get_buttons();
+        if (!(b == (CAT_BTN_MASK_SELECT|CAT_BTN_MASK_START|CAT_BTN_MASK_DOWN)))
+            return false;
+
+        k_msleep(5);
+    }
+
+    return true;
+}
+
+void indicate_waiting()
+{
+    gpio_pin_configure_dt(&lcd_bl, GPIO_OUTPUT_ACTIVE);
+    gpio_pin_set_dt(&lcd_bl, true);
+
+    struct display_buffer_descriptor desc = {
+        .buf_size = LCD_IMAGE_H*LCD_IMAGE_W,
+        .width = LCD_IMAGE_W,
+        .height = LCD_IMAGE_H,
+        .pitch = LCD_IMAGE_W
+    };
+
+    int y = 0;
+
+    lcd_write_str(0xffff, 0, (y+=8), "~~CAT BOOTLOADER MODE~~");
+    lcd_write_str(0xffff, 0, (y+=8), "Connect to a computer over USB");
+    lcd_write_str(0xffff, 0, (y+=8), "to download new firmware.");
+
+    y+=8;
+
+    lcd_write_str(0xffff, 0, (y+=8), "Or press RESET without holding");
+    lcd_write_str(0xffff, 0, (y+=8), "other keys to boot normally.");
+
+    y+=8;
+
+    lcd_write_str(0xffff, 0, (y+=8), "This is hw rev 0.2.");
+    lcd_write_str(0xffff, 0, (y+=8), "This is bl rev 1.");
+
+    y+=128+32+32-8;
+
+    lcd_write_str(0x0ff0, 0, (y+=8), "  _.._");
+    lcd_write_str(0x0ff0, 0, (y+=8), ".' .-'`");
+    lcd_write_str(0x0ff0, 0, (y+=8), "/  /  search and you will find");
+    lcd_write_str(0x0ff0, 0, (y+=8), "|  |     an end is a beginning");
+    lcd_write_str(0x0ff0, 0, (y+=8), "\\  \\    the harvest moon wanes");
+    lcd_write_str(0x0ff0, 0, (y+=8), "'._'-._");
+    lcd_write_str(0x0ff0, 0, (y+=8), "   ```");
+    
+    display_write(display_dev, 0, 0, &desc, lcd_framebuffer);
+
+    // lcd_flip();
+
+    display_blanking_off(display_dev);
+}
+
+#include <zephyr/init.h>
+#include <hal/nrf_power.h>
+
+static int board_cat_uicr_init(void)
+{
+    if (NRF_UICR->VREGHVOUT != 0x5) {
+
+        NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
+        while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
+            ;
+        }
+
+        NRF_UICR->VREGHVOUT = 0x5;
+
+        NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
+        while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
+            ;
+        }
+
+        /* a reset is required for changes to take effect */
+        NVIC_SystemReset();
+    }
 
-    return (bool)pin_active;
+    return 0;
 }
+
+SYS_INIT(board_cat_uicr_init, PRE_KERNEL_1,
+     CONFIG_KERNEL_INIT_PRIORITY_DEFAULT);
+
+
+
 #endif
 
 #if defined(CONFIG_BOOT_SERIAL_PIN_RESET) || defined(CONFIG_BOOT_FIRMWARE_LOADER_PIN_RESET)
