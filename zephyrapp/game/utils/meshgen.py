#!/opt/homebrew/bin/python3

import sys;

if(len(sys.argv) != 2):
	print("usage: meshgen.py <.obj path>");
	exit();
path = sys.argv[1];

vs = [];
fs = [];
with open(path, "r") as file:
	for line in iter(file.readline, ""):
		tokens = line.split();
		# ONLY v AND f TOKENS SUPPORTED
		match tokens:
			case ["v", x, y, z]:
				# v TOKENS ARE VEC3
				vs.append([float(x), float(y), float(z)]);
			case ["f", a, b, c]:
				f = []
				for v in [a, b, c]:
					f.append(int(v.split("/")[0])-1);
				# f TOKENS ARE JUST INT TRIPLETS
				fs.append(f);

with open("src/cat_mesh_asset.h", "w") as file:
	prefix ="""// GENERATED BY MESHGEN.PY FROM {0}
#pragma once

#include \"cat_math.h\"

struct
{{
	CAT_vec4 verts[{1}];
	int faces[{2}][3];
}} mesh =
{{""".format(path, len(vs), len(fs));
	file.write(prefix);

	file.write("""
	.verts =
	{\n""");
	for (idx, v) in enumerate(vs):
		line = "\t\t{{{0}, {1}, {2}, {3}}}".format(v[0], v[1], v[2], 1.0);
		file.write(line);
		if idx < len(vs)-1:
			file.write(",\n");
	file.write("""
	},

	.faces =
	{\n""");
	for (idx, f) in enumerate(fs):
		line = "\t\t{{{0}, {1}, {2}}}".format(f[0], f[1], f[2]);
		file.write(line);
		if idx < len(fs)-1:
			file.write(",\n");
	file.write("""
	}""");

	file.write("""
};
""");