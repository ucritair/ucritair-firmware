diff --git a/drivers/led_strip/ws2812_gpio.c b/drivers/led_strip/ws2812_gpio.c
index 5b3d472a21d..b6c6671bfd1 100644
--- a/drivers/led_strip/ws2812_gpio.c
+++ b/drivers/led_strip/ws2812_gpio.c
@@ -76,7 +76,7 @@ struct ws2812_gpio_cfg {
 static int send_buf(const struct device *dev, uint8_t *buf, size_t len)
 {
 	const struct ws2812_gpio_cfg *config = dev->config;
-	volatile uint32_t *base = (uint32_t *)&NRF_GPIO->OUTSET;
+	volatile uint32_t *base = (uint32_t *)&NRF_P1_S->OUTSET;
 	const uint32_t val = BIT(config->gpio.pin);
 	struct onoff_manager *mgr =
 		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
diff --git a/drivers/mipi_dbi/mipi_dbi_spi.c b/drivers/mipi_dbi/mipi_dbi_spi.c
index abbb02977fa..77cb1b42fda 100644
--- a/drivers/mipi_dbi/mipi_dbi_spi.c
+++ b/drivers/mipi_dbi/mipi_dbi_spi.c
@@ -46,6 +46,19 @@ uint32_t var = MIPI_DBI_SPI_READ_REQUIRED;
  */
 #define MIPI_DBI_DC_BIT BIT(8)
 
+void mipi_dbi_write_done_callback(const struct device *dev, int result, void *data);
+
+struct spi_buf spi_wrbuffer;
+struct spi_buf_set spi_wrbuf_set = {
+	.buffers = &spi_wrbuffer,
+	.count = 1,
+};
+
+extern uint32_t hack_cyc_before_data_write, hack_cyc_after_data_write;
+
+extern uint16_t lcd_framebuffer[];
+extern volatile bool write_done;
+
 static int mipi_dbi_spi_write_helper(const struct device *dev,
 				     const struct mipi_dbi_config *dbi_config,
 				     bool cmd_present, uint8_t cmd,
@@ -53,11 +66,6 @@ static int mipi_dbi_spi_write_helper(const struct device *dev,
 {
 	const struct mipi_dbi_spi_config *config = dev->config;
 	struct mipi_dbi_spi_data *data = dev->data;
-	struct spi_buf buffer;
-	struct spi_buf_set buf_set = {
-		.buffers = &buffer,
-		.count = 1,
-	};
 	int ret = 0;
 
 	ret = k_mutex_lock(&data->lock, K_FOREVER);
@@ -74,14 +82,14 @@ static int mipi_dbi_spi_write_helper(const struct device *dev,
 		    != SPI_WORD_SET(9)) {
 			return -ENOTSUP;
 		}
-		buffer.buf = &data->spi_byte;
-		buffer.len = 2;
+		spi_wrbuffer.buf = &data->spi_byte;
+		spi_wrbuffer.len = 2;
 
 		/* Send command */
 		if (cmd_present) {
 			data->spi_byte = cmd;
 			ret = spi_write(config->spi_dev, &dbi_config->config,
-					&buf_set);
+					&spi_wrbuf_set);
 			if (ret < 0) {
 				goto out;
 			}
@@ -90,7 +98,7 @@ static int mipi_dbi_spi_write_helper(const struct device *dev,
 		for (size_t i = 0; i < len; i++) {
 			data->spi_byte = MIPI_DBI_DC_BIT | data_buf[i];
 			ret = spi_write(config->spi_dev, &dbi_config->config,
-					&buf_set);
+					&spi_wrbuf_set);
 			if (ret < 0) {
 				goto out;
 			}
@@ -100,27 +108,47 @@ static int mipi_dbi_spi_write_helper(const struct device *dev,
 		 * command/data GPIO to indicate if we are sending
 		 * a command or data
 		 */
-		buffer.buf = &cmd;
-		buffer.len = sizeof(cmd);
+		spi_wrbuffer.buf = &cmd;
+		spi_wrbuffer.len = sizeof(cmd);
 
 		if (cmd_present) {
 			/* Set CD pin low for command */
 			gpio_pin_set_dt(&config->cmd_data, 0);
 			ret = spi_write(config->spi_dev, &dbi_config->config,
-					&buf_set);
+					&spi_wrbuf_set);
 			if (ret < 0) {
 				goto out;
 			}
 		}
 
 		if (len > 0) {
-			buffer.buf = (void *)data_buf;
-			buffer.len = len;
+			spi_wrbuffer.buf = (void *)data_buf;
+			spi_wrbuffer.len = len;
 
 			/* Set CD pin high for data */
 			gpio_pin_set_dt(&config->cmd_data, 1);
-			ret = spi_write(config->spi_dev, &dbi_config->config,
-					&buf_set);
+			hack_cyc_before_data_write = k_cycle_get_32();
+
+			if (((uint16_t*)data_buf == lcd_framebuffer) && true)
+			{
+				// LOG_ERR("Started async &wrbuf=%p, &wrbuf.buffers[0]=%p, wrbuf.buffers[0].buf=%p",
+				// 	&spi_wrbuf_set, &spi_wrbuf_set.buffers[0], spi_wrbuf_set.buffers[0].buf);
+				write_done = false;
+				ret = spi_transceive_cb(config->spi_dev, &dbi_config->config,
+						&spi_wrbuf_set, NULL, mipi_dbi_write_done_callback, NULL);
+				return 0; // short-circuit unlocking, unlocks in callback
+			}
+			else
+			{
+				// LOG_ERR("Execute sync &wrbuf=%p, &wrbuf.buffers[0]=%p, wrbuf.buffers[0].buf=%p",
+				// 	&spi_wrbuf_set, &spi_wrbuf_set.buffers[0], spi_wrbuf_set.buffers[0].buf);
+				ret = spi_write(config->spi_dev, &dbi_config->config,
+					&spi_wrbuf_set);
+			}
+
+			
+
+			hack_cyc_after_data_write = k_cycle_get_32();
 			if (ret < 0) {
 				goto out;
 			}
diff --git a/drivers/wifi/nrfwifi/src/qspi/src/rpu_hw_if.c b/drivers/wifi/nrfwifi/src/qspi/src/rpu_hw_if.c
index c5f909b4c3a..160be297c55 100644
--- a/drivers/wifi/nrfwifi/src/qspi/src/rpu_hw_if.c
+++ b/drivers/wifi/nrfwifi/src/qspi/src/rpu_hw_if.c
@@ -183,13 +183,13 @@ static int rpu_gpio_config(void)
 		return -ENODEV;
 	}
 
-	ret = gpio_pin_configure_dt(&bucken_spec, (GPIO_OUTPUT | NRF_GPIO_DRIVE_H0H1));
+	ret = gpio_pin_configure_dt(&bucken_spec, (GPIO_OUTPUT | NRF_GPIO_DRIVE_H0H1 | GPIO_OUTPUT_INACTIVE));
 	if (ret) {
 		LOG_ERR("BUCKEN GPIO configuration failed...");
 		return ret;
 	}
 
-	ret = gpio_pin_configure_dt(&iovdd_ctrl_spec, GPIO_OUTPUT);
+	ret = gpio_pin_configure_dt(&iovdd_ctrl_spec, GPIO_OUTPUT | GPIO_OUTPUT_INACTIVE);
 	if (ret) {
 		LOG_ERR("IOVDD GPIO configuration failed...");
 		gpio_pin_configure_dt(&bucken_spec, GPIO_DISCONNECTED);
@@ -231,7 +231,7 @@ static int rpu_pwron(void)
 		return ret;
 	}
 	/* Settling time is 50us (H0) or 100us (L0) */
-	k_msleep(1);
+	k_msleep(5);
 
 	ret = gpio_pin_set_dt(&iovdd_ctrl_spec, 1);
 	if (ret) {
@@ -240,7 +240,7 @@ static int rpu_pwron(void)
 		return ret;
 	}
 	/* Settling time for iovdd nRF7002 DK/EK - switch (TCK106AG): ~600us */
-	k_msleep(1);
+	k_msleep(5);
 
 	if ((bucken_spec.port == iovdd_ctrl_spec.port) &&
 	    (bucken_spec.pin == iovdd_ctrl_spec.pin)) {
diff --git a/soc/nordic/nrf53/soc.c b/soc/nordic/nrf53/soc.c
index cbdb8e04fe0..71abf7462e9 100644
--- a/soc/nordic/nrf53/soc.c
+++ b/soc/nordic/nrf53/soc.c
@@ -573,6 +573,8 @@ static int nordicsemi_nrf53_init(void)
 
 #endif
 
+	nrfx_coredep_delay_us(1000*500);
+
 	return 0;
 }
 
